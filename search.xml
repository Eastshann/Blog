<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手眼标定理论与实践</title>
      <link href="/2025/06/24/%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/2025/06/24/%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="手眼标定"><a href="#手眼标定" class="headerlink" title="手眼标定"></a>手眼标定</h1><h2 id="1-术语解释"><a href="#1-术语解释" class="headerlink" title="1.术语解释"></a>1.术语解释</h2><p>$R^{base}_{end}$: 机械臂<strong>末端坐标系</strong>到<strong>基底坐标系</strong>的旋转变换矩阵，对应cv2.calibrateHandEye()参数<strong>R_gripper2base</strong></p><p>$T^{base}_{end}$: 机械臂<strong>末端坐标系</strong>到<strong>基底坐标系</strong>的平移变换矩，对应cv2.calibrateHandEye()参数<strong>t_gripper2base</strong></p><p>$R^{cam}_{target}$: <strong>标定板坐标系</strong>到<strong>相机坐标系</strong>的旋转变换矩阵，对应cv2.calibrateHandEye()参数<strong>R_target2cam</strong></p><p>$T^{cam}_{target}$: <strong>标定板坐标系</strong>到<strong>相机坐标系</strong>的平移变换矩阵，对应cv2.calibrateHandEye()参数<strong>R_target2cam</strong></p><p>对一般机械臂，对于每个位姿，通常会返回六个参数：$\theta_x、\theta_y、\theta_z、t_x、t_y、t_z$，这六个参数是机械臂末端在基地坐标系下的位姿的表示。<br>$$<br>R^{base}_{end}&#x3D;R_zR_yR_x<br>$$</p><p>$$<br>T^{base}_{end}&#x3D;(t_x,t_y,t_z)^T<br>$$</p><h1 id="变换矩阵：-M-A-B"><a href="#变换矩阵：-M-A-B" class="headerlink" title="变换矩阵：$$M^A_B"></a>变换矩阵：<br>$$<br>M^A_B</h1><p>\left[<br>    \begin{matrix}<br>    R^A_B &amp; T^A_B \<br>    0 &amp; 1<br>    \end{matrix}<br>\right]<br>$$</p><p>$$<br>M^A_B &#x3D; {M^B_A}^{-1}<br>$$</p><p>转换关系<br>$$<br>R_{base}^{end}&#x3D;{R^{base}_{end}}^{-1}<br>$$</p><p>$$<br>M_{base}^{end}&#x3D;{M^{base}_{end}}^{-1}<br>$$</p><p>$$<br>T_{base}^{end} &#x3D; -{R_{end}^{base}}^{-1}T_{end}^{base}<br>$$</p><p>&#x3D;&#x3D;注意&#x3D;&#x3D;：由于R是正交矩阵，正交矩阵的逆等于正交矩阵的转置，所以有时候也会写为$R_{base}^{end}&#x3D;{R^{base}_{end}}^T$，但是变换矩阵M不是正交，不可以用转置表示逆</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求逆</span></span><br><span class="line">R_b2g = R_g2b.T  <span class="comment"># 旋转矩阵逆就是转置</span></span><br><span class="line">t_b2g = - R_g2b.T @ t_g2b</span><br></pre></td></tr></table></figure><p>$$<br>R_x(\theta_x)&#x3D;<br>\left[<br>    \begin{matrix}<br>        1 &amp; 0 &amp; 0 \<br>        0 &amp; cos\theta_x &amp; -sin\theta_x \<br>        0 &amp; sin\theta_x &amp; cos\theta_x<br>    \end{matrix}<br>\right]<br>$$</p><p>$$<br>R_y&#x3D;<br>(\theta_x)\left[<br>    \begin{matrix}<br>        cos\theta_y &amp; 0 &amp; sin\theta_y \<br>        0 &amp; 1 &amp; 0 \<br>        -sin\theta_x &amp; 0 &amp; cos\theta_y<br>    \end{matrix}<br>\right]<br>$$</p><p>$$<br>R_z&#x3D;<br>(\theta_x)\left[<br>    \begin{matrix}<br>        cos\theta_z &amp; -sin\theta_z &amp; 0 \<br>        sin\theta_z &amp; cos\theta_z &amp; 0 \<br>        0 &amp; 0 &amp; 1<br>    \end{matrix}<br>\right]<br>$$</p><p>通过拍摄标定板，使用cv2.solvePnp()函数，可以求得</p><p>$R^{cam}_{target}$</p><p>$T^{cam}_{target}$</p><h2 id="2-眼在手外"><a href="#2-眼在手外" class="headerlink" title="2.眼在手外"></a>2.眼在手外</h2><p><img src="/./../images/%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5/image-20250624153812502.png" alt="image-20250624153812502"></p><p>求解目标：基底坐标系到相机坐标系的变换矩阵$M^{cam}_{base}$</p><p>实现方法：</p><ol><li>标定板固定在机械臂末端</li><li>使用相机拍摄机械臂不同姿态下的标定板图片n张（n&gt;3）</li></ol><p>则对于每张图片可知：<br>$$<br>M^{cam}<em>{base}&#x3D;M^{cam}</em>{target}*M^{target}<em>{end}*M^{end}</em>{base}<br>$$<br>c: 相机坐标系下的坐标</p><p>b: 基底坐标系下的坐标<br>$$<br>c&#x3D;M^{cam}_{base}*b<br>$$</p><p>$$<br>b &#x3D;{M^{cam}_{base}}^{-1}*c<br>$$</p><p>其中：</p><p>$M^{cam}_{target}$: 可通过拍摄标定板图片直接求解</p><p>$M^{end}_{base}$: 可由机械臂末端位姿参数求得</p><p>$M^{target}_{end}$: &#x3D;&#x3D;未知量&#x3D;&#x3D;，由于标定板固定在机械臂末端，所以对每组图片，该转换矩阵都相同</p><h1 id="变形得：-M-target-end-M-cam-target-1-M-cam-base-M-end-base-1-当我们拍摄了2张图片后：-M-cam-target-1-1-M-cam-base-M-end-base-1-1"><a href="#变形得：-M-target-end-M-cam-target-1-M-cam-base-M-end-base-1-当我们拍摄了2张图片后：-M-cam-target-1-1-M-cam-base-M-end-base-1-1" class="headerlink" title="变形得：$$M^{target}{end}&#x3D;{M^{cam}{target}}^{-1}M^{cam}_{base}{M^{end}{base}}^{-1}$$当我们拍摄了2张图片后：$${M^{cam}{target}}^{-1}1*M^{cam}{base}*{M^{end}_{base}}^{-1}_1"></a>变形得：<br>$$<br>M^{target}<em>{end}&#x3D;{M^{cam}</em>{target}}^{-1}<em>M^{cam}_{base}</em>{M^{end}<em>{base}}^{-1}<br>$$<br>当我们拍摄了2张图片后：<br>$$<br>{M^{cam}</em>{target}}^{-1}<em>1*M^{cam}</em>{base}*{M^{end}_{base}}^{-1}_1</h1><h1 id="M-cam-target-1-2-M-cam-base-M-end-base-1-2-变形得：-M-cam-target-2-M-cam-target-1-1-M-cam-base"><a href="#M-cam-target-1-2-M-cam-base-M-end-base-1-2-变形得：-M-cam-target-2-M-cam-target-1-1-M-cam-base" class="headerlink" title="{M^{cam}{target}}^{-1}2*M^{cam}{base}*{M^{end}{base}}^{-1}2$$变形得：$${M^{cam}{target}}2*{M^{cam}{target}}^{-1}1*M^{cam}{base}"></a>{M^{cam}<em>{target}}^{-1}<em>2*M^{cam}</em>{base}*{M^{end}</em>{base}}^{-1}<em>2<br>$$<br>变形得：<br>$$<br>{M^{cam}</em>{target}}<em>2*{M^{cam}</em>{target}}^{-1}<em>1*M^{cam}</em>{base}</h1><p>M^{cam}<em>{base}*{M^{end}</em>{base}}^{-1}<em>2*{M^{end}</em>{base}}_1<br>$$<br>这是一个$AX&#x3D;XA$的方程</p><p>当我们拍摄了n张图片后，我们就有了n-1个方程的方程组</p><p>通过Tais方法解方程</p><p><img src="/./../images/%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5/image-20250624155124087.png" alt="image-20250624155124087"></p><h2 id="3-眼在手上"><a href="#3-眼在手上" class="headerlink" title="3.眼在手上"></a>3.眼在手上</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>相机成像模型与相机标定</title>
      <link href="/2025/06/23/%E7%9B%B8%E6%9C%BA%E6%88%90%E5%83%8F%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/"/>
      <url>/2025/06/23/%E7%9B%B8%E6%9C%BA%E6%88%90%E5%83%8F%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="小孔成像"><a href="#小孔成像" class="headerlink" title="小孔成像"></a>小孔成像</h2><p>由于相机采用小孔成像的原理来采集图像，为了使图像更清晰，就采用了透镜的方式。但是因为透镜本身在成像过程中会不可避免的引入径向畸变和切向畸变（比如一条直线成像后会变成一条弧线）。为了使得现实中的图像能够真实的呈现在图片中有利于之后的机械臂的抓取，则需要对相机进行畸变校正。</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623092918445.png" alt="image-20250623092918445"></p><h2 id="相机的成像模型"><a href="#相机的成像模型" class="headerlink" title="相机的成像模型"></a>相机的成像模型</h2><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623093433508.png" alt="image-20250623093433508"></p><p>世界坐标系是一个物体在真实三维世界下的坐标，世界坐标系的原点根据具体情况来定</p><p>相机坐标系是以相机光心为原点的三维坐标系，Zc为深度信息</p><p>图像坐标系是以图像中心为原点的二维坐标系，P点为Pw投影到像平面上的位置</p><p>像素坐标系是以图像左上角为原点的二维坐标系，好处是所有坐标都是正数</p><p>相机成像过程为，<strong>世界坐标系</strong>经过刚体变换（平移、旋转）后和相机坐标系重叠，即转换为<strong>相机坐标系</strong>。然后通过透视投影转换为<strong>图像坐标</strong>，最后经过坐标变换得出<strong>像素坐标</strong>。</p><h2 id="世界坐标系到相机坐标系"><a href="#世界坐标系到相机坐标系" class="headerlink" title="世界坐标系到相机坐标系"></a>世界坐标系到相机坐标系</h2><p>从世界坐标系变换到相机坐标系属于刚体变换:即物体不会发生形变，只需要进行旋转和平移。思路:先进行坐标系旋转，后进行坐标系平移。</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623095650474.png" alt="image-20250623095650474"></p><p>世界坐标系通过左乘矩阵$R_z$先绕Z轴转动$\theta$角，再通过左乘矩阵$R_y$绕Y轴转动$\beta$角,最后通过左乘矩阵$R_x$绕X轴转动$\alpha$角。于是可以得到旋转矩阵$R&#x3D;R_xR_yR_z$。</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623100151430.png" alt="image-20250623100151430"></p><p>经过一系列的旋转，世界坐标系和相机坐标系的朝向一致，经过平移可以让两个坐标系重合。平移向量为世界坐标系原点减去相机坐标系原点。将平移和旋转叠加起来得到下式：</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623102307173.png" alt="image-20250623102307173"></p><h2 id="相机坐标系到图像坐标系"><a href="#相机坐标系到图像坐标系" class="headerlink" title="相机坐标系到图像坐标系"></a>相机坐标系到图像坐标系</h2><p>透视投影(perspective projection): 用中心投影法将形体投射到投影面上，从而获得的一种较为接近视觉效果的单面投影图，有一点像皮影戏它符合人们心理习惯，即离视点近的物体大，离视点远的物体小。</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623095821120.png" alt="image-20250623095821120"></p><p>根据相似三角形原理可得：</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623095834551.png" alt="image-20250623095834551"></p><h2 id="图像坐标系到像素坐标系"><a href="#图像坐标系到像素坐标系" class="headerlink" title="图像坐标系到像素坐标系"></a>图像坐标系到像素坐标系</h2><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623110251861.png" alt="image-20250623110251861"></p><h2 id="理想相机数学模型"><a href="#理想相机数学模型" class="headerlink" title="理想相机数学模型"></a>理想相机数学模型</h2><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623110327011.png" alt="image-20250623110327011"></p><h2 id="相机畸变"><a href="#相机畸变" class="headerlink" title="相机畸变"></a>相机畸变</h2><p>畸变分为桶形畸变和枕形畸变。</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112449899.png" alt="image-20250623112449899"></p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112254217.png" alt="image-20250623112254217"></p><p>另外在相机装配过程中成像芯片可能和镜头不平行，最后图像可能发生倾斜畸变</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112537402.png" alt="image-20250623112537402"></p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112556946.png" alt="image-20250623112556946"></p><h2 id="畸变模型"><a href="#畸变模型" class="headerlink" title="畸变模型"></a>畸变模型</h2><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112642409.png" alt="image-20250623112642409"></p><p>两种畸变公式叠加起来得到最后的畸变公式</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112733653.png" alt="image-20250623112733653"></p><h2 id="模型总结"><a href="#模型总结" class="headerlink" title="模型总结"></a>模型总结</h2><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623112914367.png" alt="image-20250623112914367"></p><h2 id="张正友标定法"><a href="#张正友标定法" class="headerlink" title="张正友标定法"></a>张正友标定法</h2><p>现在对于相机最常用的方法是<strong>张正友标定法</strong>，这种方法是利用棋盘格标定板每个角点像素坐标的相对关系以及在已知的真实坐标相对关系的条件下计算出来的。在opencv中已经有了相对于的库，在使用之前需要设置一下每个格子的大小以及格子的行列数（减去1）即可进行相机标定。</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5C3.jpg" alt="3"></p><ol><li><p>用二维靶标代替三维标靶</p></li><li><p>用棋盘格的角点作为特征点</p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623114200328.png" alt="image-20250623114200328"></p></li><li><p>张正友标定只考虑了径向畸变，没有考虑切向畸变</p></li></ol><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623114327451.png" alt="image-20250623114327451"></p><p><strong>标定步骤</strong></p><p><img src="/../images%5C%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A%E4%B8%8E%E6%89%8B%E7%9C%BC%E6%A0%87%E5%AE%9A%5Cimage-20250623114434865.png" alt="image-20250623114434865"></p><p>打印标定板 -&gt; 从不同角度拍摄 -&gt; 提取特征点 -&gt; 估计无畸变情况下的五个内参和六个外参 -&gt; 估计畸变参数 -&gt; 最大似然法进行联合优化 -&gt; 相机内参、外参、畸变参数</p><p><strong>标定图像的选择</strong></p><p>常见的标定图案有棋盘格、圆、圆环，对于普通相机一般使用棋盘格就可以了</p><p><strong>标定板注意事项</strong></p><ol><li>棋盘格的大小要合适，不能太小也不能太大，保证标定板的成像面积大致占整个画面的1&#x2F;4</li><li>棋盘格内角点行列个数最好不一致，比如7*8</li><li>须保证打印的棋盘格的平整性，尽可能贴平</li></ol><p><strong>参数个数</strong></p><ol><li><p>总参数个数: 5个相机内参(也有说4个的)，3个旋转角度、3个平移，5个畸变参数</p></li><li><p>相机内参: f,dx,dy,u0,v0(fx,fy)，旋转:(α,Ψ,@)，平移:tx,ty,tz，畸变(kl,k2,k3,pl,p2)</p></li><li><p>不同的棋盘格图像，外参是不同的，一般外参指的是第一张图像的旋转平移参数</p></li></ol><p><strong>拍摄注意事项</strong></p><ol><li>把图像分成四个象限，标定板平均分布在每个象限，每个象限至少拍两个不同倾斜角度的图片</li><li>标定板图片需要覆盖整个测量视场，标定图片的数量通常在15~25张之间</li><li>标定板的成像面积应大致占整幅画面的1&#x2F;3~1&#x2F;4</li><li>标定板成像过暗就需要用辅助光源补光，过亮就调整曝光时间，保证标定板的亮度足够且均匀</li><li>标定过程，相机的光圈、焦距不能发生改变改变需要重新标定</li></ol><p><strong>重投影误差</strong></p><p>标定后每个三维点根据相机的投影矩阵计算得到的图像位置与实际图像位置之间总存在一个距离，这个距离的累加和就是重投影误差<br>一般情况下如果重投影误差小于0.3pixel，我们就认为标定效果良好。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV多尺度模板匹配</title>
      <link href="/2025/06/04/OpenCV%E5%A4%9A%E5%B0%BA%E5%BA%A6%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D/"/>
      <url>/2025/06/04/OpenCV%E5%A4%9A%E5%B0%BA%E5%BA%A6%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载原图和模板图（灰度图）</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;image.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">template = cv2.imread(<span class="string">&#x27;template.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">img_color = cv2.cvtColor(img.copy(), cv2.COLOR_GRAY2BGR)  <span class="comment"># 转为彩色图，便于画彩色矩形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取模板原始大小</span></span><br><span class="line">t_height, t_width = template.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置尺度范围</span></span><br><span class="line">scale_factors = [<span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>, <span class="number">1.25</span>, <span class="number">1.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置匹配的阈值（相似度越接近1越相似）</span></span><br><span class="line">threshold = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历不同的缩放比例</span></span><br><span class="line"><span class="keyword">for</span> scale <span class="keyword">in</span> scale_factors:</span><br><span class="line">    <span class="comment"># 缩放模板</span></span><br><span class="line">    resized_template = cv2.resize(template, <span class="literal">None</span>, fx=scale, fy=scale, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    rt_height, rt_width = resized_template.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果模板大于原图，则跳过</span></span><br><span class="line">    <span class="keyword">if</span> rt_height &gt; img.shape[<span class="number">0</span>] <span class="keyword">or</span> rt_width &gt; img.shape[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行模板匹配</span></span><br><span class="line">    result = cv2.matchTemplate(img, resized_template, cv2.TM_CCOEFF_NORMED)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到所有匹配得分大于阈值的位置</span></span><br><span class="line">    y_coords, x_coords = np.where(result &gt;= threshold)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历每一个符合条件的位置</span></span><br><span class="line">    <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(x_coords, y_coords):</span><br><span class="line">        top_left = (x, y)</span><br><span class="line">        bottom_right = (x + rt_width, y + rt_height)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在图像上画出绿色矩形框表示匹配区域</span></span><br><span class="line">        cv2.rectangle(img_color, top_left, bottom_right, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示匹配得分（可选）</span></span><br><span class="line">        score = result[y, x]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Scale: <span class="subst">&#123;scale:<span class="number">.2</span>f&#125;</span>, Match Score: <span class="subst">&#123;score:<span class="number">.4</span>f&#125;</span>, Position: <span class="subst">&#123;top_left&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示最终结果</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Multi-match Template Matching&#x27;</span>, img_color)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像降噪</title>
      <link href="/2025/06/04/OpenCV%E5%9B%BE%E5%83%8F%E9%99%8D%E5%99%AA/"/>
      <url>/2025/06/04/OpenCV%E5%9B%BE%E5%83%8F%E9%99%8D%E5%99%AA/</url>
      
        <content type="html"><![CDATA[<p>OpenCV 提供了多种降噪方法，可以根据具体的需求选择合适的方法。常用的图像降噪方法包括：</p><p><strong>高斯滤波（Gaussian Blur）</strong>：利用高斯函数对图像进行模糊处理，去除噪声。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;input_image.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">denoised_image = cv2.GaussianBlur(image, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Denoised Image&#x27;</span>, denoised_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>中值滤波（Median Blur）</strong>：用像素邻域的中值来代替像素值，适用于去除椒盐噪声。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;input_image.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 中值滤波</span></span><br><span class="line">denoised_image = cv2.medianBlur(image, <span class="number">5</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Denoised Image&#x27;</span>, denoised_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>双边滤波（Bilateral Filter）</strong>：保留边缘的同时进行降噪处理，适合保留图像细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;input_image.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 双边滤波</span></span><br><span class="line">denoised_image = cv2.bilateralFilter(image, <span class="number">9</span>, <span class="number">75</span>, <span class="number">75</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Denoised Image&#x27;</span>, denoised_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV轮廓提取和连通域计算</title>
      <link href="/2025/06/04/OpenCV%E8%BD%AE%E5%BB%93%E6%8F%90%E5%8F%96%E5%92%8C%E8%BF%9E%E9%80%9A%E5%9F%9F%E8%AE%A1%E7%AE%97/"/>
      <url>/2025/06/04/OpenCV%E8%BD%AE%E5%BB%93%E6%8F%90%E5%8F%96%E5%92%8C%E8%BF%9E%E9%80%9A%E5%9F%9F%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="轮廓检测-Contour-Detection"><a href="#轮廓检测-Contour-Detection" class="headerlink" title="轮廓检测 (Contour Detection)"></a>轮廓检测 (Contour Detection)</h2><h3 id="1-基本轮廓检测"><a href="#1-基本轮廓检测" class="headerlink" title="1.基本轮廓检测"></a>1.基本轮廓检测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像并转为灰度图</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;image.jpg&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二值化处理</span></span><br><span class="line">ret, binary = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找轮廓</span></span><br><span class="line">contours, hierarchy = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制轮廓</span></span><br><span class="line">result = img.copy()</span><br><span class="line">cv2.drawContours(result, contours, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="2-轮廓检索模式"><a href="#2-轮廓检索模式" class="headerlink" title="2.轮廓检索模式"></a>2.轮廓检索模式</h3><ul><li><code>cv2.RETR_EXTERNAL</code>: 只检索外部轮廓</li><li><code>cv2.RETR_LIST</code>: 检索所有轮廓，不建立层级关系</li><li><code>cv2.RETR_CCOMP</code>: 检索所有轮廓，建立两级层级关系</li><li><code>cv2.RETR_TREE</code>: 检索所有轮廓，建立完整层级关系</li></ul><h3 id="3-轮廓近似方法"><a href="#3-轮廓近似方法" class="headerlink" title="3.轮廓近似方法"></a>3.轮廓近似方法</h3><ul><li><p><code>cv2.CHAIN_APPROX_NONE</code>: 存储所有轮廓点</p></li><li><p><code>cv2.CHAIN_APPROX_SIMPLE</code>: 压缩水平、垂直和对角线段，只保留端点</p></li></ul><h3 id="4-轮廓属性计算"><a href="#4-轮廓属性计算" class="headerlink" title="4.轮廓属性计算"></a>4.轮廓属性计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> contour <span class="keyword">in</span> contours:</span><br><span class="line">    <span class="comment"># 轮廓面积</span></span><br><span class="line">    area = cv2.contourArea(contour)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 轮廓周长</span></span><br><span class="line">    perimeter = cv2.arcLength(contour, <span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 边界矩形</span></span><br><span class="line">    x, y, w, h = cv2.boundingRect(contour)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 最小外接圆</span></span><br><span class="line">    (cx, cy), radius = cv2.minEnclosingCircle(contour)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 轮廓重心</span></span><br><span class="line">    M = cv2.moments(contour)</span><br><span class="line">    <span class="keyword">if</span> M[<span class="string">&quot;m00&quot;</span>] != <span class="number">0</span>:</span><br><span class="line">        cx = <span class="built_in">int</span>(M[<span class="string">&quot;m10&quot;</span>] / M[<span class="string">&quot;m00&quot;</span>])</span><br><span class="line">        cy = <span class="built_in">int</span>(M[<span class="string">&quot;m01&quot;</span>] / M[<span class="string">&quot;m00&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="连通域计算-Connected-Components"><a href="#连通域计算-Connected-Components" class="headerlink" title="连通域计算 (Connected Components)"></a>连通域计算 (Connected Components)</h2><h3 id="1-基本连通域分析"><a href="#1-基本连通域分析" class="headerlink" title="1.基本连通域分析"></a>1.基本连通域分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用cv2.connectedComponents</span></span><br><span class="line">num_labels, labels = cv2.connectedComponents(binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建彩色标签图像</span></span><br><span class="line">label_img = np.uint8(<span class="number">255</span> * labels / np.<span class="built_in">max</span>(labels))</span><br><span class="line">colored_labels = cv2.applyColorMap(label_img, cv2.COLORMAP_JET)</span><br></pre></td></tr></table></figure><h3 id="2-带统计信息的连通域分析"><a href="#2-带统计信息的连通域分析" class="headerlink" title="2.带统计信息的连通域分析"></a>2.带统计信息的连通域分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用cv2.connectedComponentsWithStats</span></span><br><span class="line">num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stats包含每个连通域的统计信息：</span></span><br><span class="line"><span class="comment"># [x, y, width, height, area]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_labels):  <span class="comment"># 跳过背景(label=0)</span></span><br><span class="line">    x, y, w, h, area = stats[i]</span><br><span class="line">    cx, cy = centroids[i]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;连通域 <span class="subst">&#123;i&#125;</span>: 面积=<span class="subst">&#123;area&#125;</span>, 中心=(<span class="subst">&#123;cx:<span class="number">.1</span>f&#125;</span>, <span class="subst">&#123;cy:<span class="number">.1</span>f&#125;</span>)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在图像上标记</span></span><br><span class="line">    cv2.rectangle(result, (x, y), (x+w, y+h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.circle(result, (<span class="built_in">int</span>(cx), <span class="built_in">int</span>(cy)), <span class="number">3</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="3-连通域过滤"><a href="#3-连通域过滤" class="headerlink" title="3.连通域过滤"></a>3.连通域过滤</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据面积过滤小连通域</span></span><br><span class="line">min_area = <span class="number">100</span></span><br><span class="line">filtered_labels = labels.copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_labels):</span><br><span class="line">    <span class="keyword">if</span> stats[i, cv2.CC_STAT_AREA] &lt; min_area:</span><br><span class="line">        filtered_labels[filtered_labels == i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新标记过滤后的连通域</span></span><br><span class="line">filtered_binary = (filtered_labels &gt; <span class="number">0</span>).astype(np.uint8) * <span class="number">255</span></span><br></pre></td></tr></table></figure><h3 id="4-保存所有连通域"><a href="#4-保存所有连通域" class="headerlink" title="4.保存所有连通域"></a>4.保存所有连通域</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(g_cam, connectivity=<span class="number">8</span>)</span><br><span class="line">output_image = np.zeros_like(g_cam)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_labels):</span><br><span class="line">    output_image[labels == i] = <span class="number">255</span></span><br></pre></td></tr></table></figure><h3 id="5-单独保存连通域"><a href="#5-单独保存连通域" class="headerlink" title="5.单独保存连通域"></a>5.单独保存连通域</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_labels):</span><br><span class="line">    <span class="comment">#################</span></span><br><span class="line">    <span class="comment">#   单个连通域</span></span><br><span class="line">    <span class="comment">#################</span></span><br><span class="line">    component_image = np.zeros_like(labels)</span><br><span class="line">    component_image[labels == label] = <span class="number">255</span></span><br><span class="line">    component_image = np.uint8(component_image)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动划分数据集脚本</title>
      <link href="/2025/05/19/%E8%87%AA%E5%8A%A8%E5%88%92%E5%88%86%E6%95%B0%E6%8D%AE%E9%9B%86%E8%84%9A%E6%9C%AC/"/>
      <url>/2025/05/19/%E8%87%AA%E5%8A%A8%E5%88%92%E5%88%86%E6%95%B0%E6%8D%AE%E9%9B%86%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>自动将数据集划分为测试集、验证集、测试集（1 - train - val）</p><p><strong>文件夹格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">source_dir/</span><br><span class="line">|</span><br><span class="line">|-- class1/</span><br><span class="line">|   |-- 1.png</span><br><span class="line">|   |-- 2.png</span><br><span class="line">|   |-- ...</span><br><span class="line">|   |</span><br><span class="line">|-- class2/</span><br><span class="line">|   |-- 1.png</span><br><span class="line">|   |-- 2.png</span><br><span class="line">|   |-- ...</span><br><span class="line">|</span><br><span class="line">|-- class3/</span><br><span class="line">|   |-- 1.png</span><br><span class="line">|   |-- 2.png</span><br><span class="line">|   |-- ...</span><br><span class="line">|-- ...</span><br></pre></td></tr></table></figure><p><strong>脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os       <span class="comment"># 操作文件和文件夹路径</span></span><br><span class="line"><span class="keyword">import</span> random   <span class="comment"># 用于打乱文件顺序</span></span><br><span class="line"><span class="keyword">import</span> shutil   <span class="comment"># 用于复制文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_dataset</span>(<span class="params">source_dir, dest_dir, train_ratio=<span class="number">0.8</span>, val_ratio=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    按指定比例划分图像数据集为训练集、验证集和测试集。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        source_dir: 原始数据集路径，要求每个类别是一个子文件夹</span></span><br><span class="line"><span class="string">        dest_dir: 输出路径，将创建 train/val/test 子目录</span></span><br><span class="line"><span class="string">        train_ratio: 训练集所占比例（默认0.8）</span></span><br><span class="line"><span class="string">        val_ratio: 验证集所占比例（默认0.1），测试集 = 1 - train - val</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取所有类别名称（即 source_dir 下的子文件夹）</span></span><br><span class="line">    class_names = os.listdir(source_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> class_name <span class="keyword">in</span> class_names:</span><br><span class="line">        <span class="comment"># 获取每个类别下的所有文件路径（例如图片）</span></span><br><span class="line">        files = os.listdir(os.path.join(source_dir, class_name))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打乱文件顺序，确保划分是随机的</span></span><br><span class="line">        random.shuffle(files)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算训练集和验证集的分界点</span></span><br><span class="line">        train_split = <span class="built_in">int</span>(<span class="built_in">len</span>(files) * train_ratio)</span><br><span class="line">        val_split = <span class="built_in">int</span>(<span class="built_in">len</span>(files) * (train_ratio + val_ratio))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 划分文件列表</span></span><br><span class="line">        subsets = &#123;</span><br><span class="line">            <span class="string">&#x27;train&#x27;</span>: files[:train_split],               <span class="comment"># 前 train_ratio 的文件</span></span><br><span class="line">            <span class="string">&#x27;val&#x27;</span>: files[train_split:val_split],        <span class="comment"># 中间 val_ratio 的文件</span></span><br><span class="line">            <span class="string">&#x27;test&#x27;</span>: files[val_split:]                   <span class="comment"># 剩下的作为测试集</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 复制文件到对应的目标路径</span></span><br><span class="line">        <span class="keyword">for</span> subset, subset_files <span class="keyword">in</span> subsets.items():</span><br><span class="line">            <span class="comment"># 构建目标子文件夹路径，如：dest_dir/train/class_name/</span></span><br><span class="line">            subset_dir = os.path.join(dest_dir, subset, class_name)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 创建子文件夹（如果不存在）</span></span><br><span class="line">            os.makedirs(subset_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> subset_files:</span><br><span class="line">                <span class="comment"># 构建原始文件路径和目标路径</span></span><br><span class="line">                src_path = os.path.join(source_dir, class_name, f)</span><br><span class="line">                dst_path = os.path.join(subset_dir, f)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 复制文件</span></span><br><span class="line">                shutil.copy(src_path, dst_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例调用：</span></span><br><span class="line"><span class="comment"># split_dataset(&#x27;data/original&#x27;, &#x27;data/split&#x27;)</span></span><br><span class="line"><span class="comment"># 假设 data/original 中是按类别分文件夹的结构，调用后将在 data/split 下创建 train/val/test 三个子文件夹，每个内部保留类别结构。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志/终端/代码中通用的 Unicode Emoji 字符</title>
      <link href="/2025/05/18/%E6%97%A5%E5%BF%97-%E7%BB%88%E7%AB%AF-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%80%9A%E7%94%A8%E7%9A%84%20Unicode%20Emoji%20%E5%AD%97%E7%AC%A6/"/>
      <url>/2025/05/18/%E6%97%A5%E5%BF%97-%E7%BB%88%E7%AB%AF-%E4%BB%A3%E7%A0%81%E4%B8%AD%E9%80%9A%E7%94%A8%E7%9A%84%20Unicode%20Emoji%20%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>在代码日志（如终端输出、构建日志、CI&#x2F;CD 脚本、Git 提交、调试信息）中使用 Emoji 表情符号，可以增强可读性和快速识别不同类型的信息。</p><h2 id="✅-成功-完成"><a href="#✅-成功-完成" class="headerlink" title="✅ 成功&#x2F;完成"></a>✅ <strong>成功&#x2F;完成</strong></h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>✅</td><td>操作成功</td><td>U+2705</td></tr><tr><td>✔️</td><td>已完成&#x2F;通过检查</td><td>U+2714 U+FE0F</td></tr><tr><td>🟢</td><td>状态良好&#x2F;已启用</td><td>U+1F7E2</td></tr><tr><td>🎉</td><td>成功&#x2F;构建完成</td><td>U+1F389</td></tr><tr><td>🆗</td><td>OK&#x2F;状态正常</td><td>U+1F197</td></tr></tbody></table><h2 id="⚠️-警告-注意"><a href="#⚠️-警告-注意" class="headerlink" title="⚠️ 警告&#x2F;注意"></a>⚠️ 警告&#x2F;注意</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>⚠️</td><td>警告</td><td>U+26A0 U+FE0F</td></tr><tr><td>🟡</td><td>中性&#x2F;需要注意</td><td>U+1F7E1</td></tr><tr><td>❕</td><td>轻微警告&#x2F;提示</td><td>U+2755</td></tr><tr><td>🔅</td><td>降低等级&#x2F;可选优化</td><td>U+1F505</td></tr></tbody></table><h2 id="❌-错误-失败"><a href="#❌-错误-失败" class="headerlink" title="❌ 错误&#x2F;失败"></a>❌ 错误&#x2F;失败</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>❌</td><td>错误&#x2F;失败</td><td>U+274C</td></tr><tr><td>❗</td><td>严重错误&#x2F;阻塞</td><td>U+2757</td></tr><tr><td>🔴</td><td>严重&#x2F;崩溃</td><td>U+1F534</td></tr><tr><td>💥</td><td>崩溃&#x2F;异常</td><td>U+1F4A5</td></tr><tr><td>🛑</td><td>停止</td><td>U+1F6D1</td></tr></tbody></table><h2 id="🔄-构建-处理过程"><a href="#🔄-构建-处理过程" class="headerlink" title="🔄 构建&#x2F;处理过程"></a>🔄 构建&#x2F;处理过程</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>🔄</td><td>正在处理&#x2F;刷新</td><td>U+1F501</td></tr><tr><td>⏳</td><td>等待中</td><td>U+23F3</td></tr><tr><td>🕐</td><td>等待&#x2F;超时提醒</td><td>U+1F550</td></tr><tr><td>📦</td><td>构建中&#x2F;包管理</td><td>U+1F4E6</td></tr></tbody></table><h2 id="🧪-测试-调试"><a href="#🧪-测试-调试" class="headerlink" title="🧪 测试&#x2F;调试"></a>🧪 测试&#x2F;调试</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>🧪</td><td>单元测试</td><td>U+1F9EA</td></tr><tr><td>🐞</td><td>Bug&#x2F;调试中</td><td>U+1F41E</td></tr><tr><td>🔍</td><td>日志搜索&#x2F;跟踪</td><td>U+1F50D</td></tr><tr><td>🧹</td><td>清理&#x2F;清除缓存</td><td>U+1F9F9</td></tr></tbody></table><h2 id="📄-文件-Git-操作"><a href="#📄-文件-Git-操作" class="headerlink" title="📄 文件&#x2F;Git 操作"></a>📄 文件&#x2F;Git 操作</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>📄</td><td>文件变更</td><td>U+1F4C4</td></tr><tr><td>📝</td><td>文档更新</td><td>U+1F4DD</td></tr><tr><td>🗃️</td><td>数据结构&#x2F;配置更改</td><td>U+1F5C3 U+FE0F</td></tr><tr><td>🧱</td><td>构建模块</td><td>U+1F9F1</td></tr></tbody></table><h2 id="🧠-信息-调试输出"><a href="#🧠-信息-调试输出" class="headerlink" title="🧠 信息&#x2F;调试输出"></a>🧠 信息&#x2F;调试输出</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>ℹ️</td><td>信息</td><td>U+2139 U+FE0F</td></tr><tr><td>🧠</td><td>思路&#x2F;逻辑提示</td><td>U+1F9E0</td></tr><tr><td>🗒️</td><td>输出日志&#x2F;文本</td><td>U+1F5D2 U+FE0F</td></tr><tr><td>📊</td><td>分析&#x2F;结果</td><td>U+1F4CA</td></tr></tbody></table><h2 id="🌐-网络-部署-服务"><a href="#🌐-网络-部署-服务" class="headerlink" title="🌐 网络&#x2F;部署&#x2F;服务"></a>🌐 网络&#x2F;部署&#x2F;服务</h2><table><thead><tr><th>Emoji</th><th>含义</th><th>Unicode</th></tr></thead><tbody><tr><td>🚀</td><td>启动&#x2F;部署</td><td>U+1F680</td></tr><tr><td>🌐</td><td>网络相关</td><td>U+1F310</td></tr><tr><td>🛰️</td><td>后端通信</td><td>U+1F6F0 U+FE0F</td></tr><tr><td>🛠️</td><td>配置中&#x2F;维护</td><td>U+1F6E0 U+FE0F</td></tr></tbody></table><h2 id="示例代码日志输出"><a href="#示例代码日志输出" class="headerlink" title="示例代码日志输出"></a>示例代码日志输出</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">✅ 构建成功</span><br><span class="line">⚠️ 警告：某些依赖版本过旧</span><br><span class="line">❌ 测试失败：test_login_case_3</span><br><span class="line">🚀 部署完成：v2.3.0</span><br><span class="line">🔍 日志分析开始...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Labelme检测标注转Yolo格式</title>
      <link href="/2025/05/18/Labelme%E6%A3%80%E6%B5%8B%E6%A0%87%E6%B3%A8%E8%BD%ACYolo%E6%A0%BC%E5%BC%8F/"/>
      <url>/2025/05/18/Labelme%E6%A3%80%E6%B5%8B%E6%A0%87%E6%B3%A8%E8%BD%ACYolo%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>labelme标注图片标签为json格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;flags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shapes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;points&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="number">663.9770114942528</span><span class="punctuation">,</span></span><br><span class="line">          <span class="number">393.28735632183907</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">[</span></span><br><span class="line">          <span class="number">691.5632183908044</span><span class="punctuation">,</span></span><br><span class="line">          <span class="number">431.2183908045977</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;shape_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rectangle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;imagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;imageData&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">  <span class="attr">&quot;imageHeight&quot;</span><span class="punctuation">:</span> <span class="number">1536</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;imageWidth&quot;</span><span class="punctuation">:</span> <span class="number">1536</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Yolo格式的图片标签格式为txt：</p><p>每行：class_id x_center y_center width height</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0.441257</span> <span class="number">0.268394</span> <span class="number">0.017960</span> <span class="number">0.024695</span></span><br></pre></td></tr></table></figure><h2 id="LabelMe（rectangle）转-YOLO-格式脚本"><a href="#LabelMe（rectangle）转-YOLO-格式脚本" class="headerlink" title="LabelMe（rectangle）转 YOLO 格式脚本"></a>LabelMe（rectangle）转 YOLO 格式脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义类别列表，顺序对应 class_id（请根据你的数据修改）</span></span><br><span class="line">CLASS_LIST = [<span class="string">&#x27;ng&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_labelme_rect_to_yolo</span>(<span class="params">json_path, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将LabelMe标注的矩形框转换为YOLO格式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        json_path (str): LabelMe标注文件的路径。</span></span><br><span class="line"><span class="string">        output_dir (str): 输出YOLO格式文件的目录。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        FileNotFoundError: 如果指定的LabelMe标注文件不存在。</span></span><br><span class="line"><span class="string">        JSONDecodeError: 如果JSON文件解析失败。</span></span><br><span class="line"><span class="string">        KeyError: 如果JSON文件中缺少必要的键。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(json_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line"></span><br><span class="line">    image_width = data[<span class="string">&#x27;imageWidth&#x27;</span>]</span><br><span class="line">    image_height = data[<span class="string">&#x27;imageHeight&#x27;</span>]</span><br><span class="line">    image_name = os.path.splitext(data[<span class="string">&#x27;imagePath&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">    yolo_lines = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> data[<span class="string">&#x27;shapes&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> shape[<span class="string">&#x27;shape_type&#x27;</span>] != <span class="string">&#x27;rectangle&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过非矩形</span></span><br><span class="line"></span><br><span class="line">        label = shape[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> CLASS_LIST:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过不在类别列表中的标签</span></span><br><span class="line"></span><br><span class="line">        class_id = CLASS_LIST.index(label)</span><br><span class="line">        (x1, y1), (x2, y2) = shape[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算归一化后的中心坐标和宽高</span></span><br><span class="line">        x_center = ((x1 + x2) / <span class="number">2</span>) / image_width</span><br><span class="line">        y_center = ((y1 + y2) / <span class="number">2</span>) / image_height</span><br><span class="line">        bbox_width = <span class="built_in">abs</span>(x2 - x1) / image_width</span><br><span class="line">        bbox_height = <span class="built_in">abs</span>(y2 - y1) / image_height</span><br><span class="line"></span><br><span class="line">        yolo_line = <span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> <span class="subst">&#123;x_center:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;y_center:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;bbox_width:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;bbox_height:<span class="number">.6</span>f&#125;</span>&quot;</span></span><br><span class="line">        yolo_lines.append(yolo_line)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入 .txt 文件</span></span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    output_path = os.path.join(output_dir, image_name + <span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>.join(yolo_lines))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;✅ Converted: <span class="subst">&#123;json_path&#125;</span> -&gt; <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_all_jsons</span>(<span class="params">input_dir, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将指定目录下的所有JSON文件转换为YOLO格式并保存到输出目录。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_dir (str): 输入目录路径，该目录下应包含多个JSON文件。</span></span><br><span class="line"><span class="string">        output_dir (str): 输出目录路径，转换后的YOLO格式文件将保存在此目录下。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        FileNotFoundError: 如果输入目录不存在，则抛出此异常。</span></span><br><span class="line"><span class="string">        NotADirectoryError: 如果输入路径不是一个目录，则抛出此异常。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> tqdm(os.listdir(input_dir)):</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.json&#x27;</span>):</span><br><span class="line">            convert_labelme_rect_to_yolo(os.path.join(input_dir, file), output_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    input_folder = <span class="string">&#x27;./json&#x27;</span>  <span class="comment"># 替换为你的LabelMe JSON文件夹路径</span></span><br><span class="line">    output_folder = <span class="string">&#x27;./label&#x27;</span>   <span class="comment"># 输出YOLO标注文件夹</span></span><br><span class="line">    convert_all_jsons(input_folder, output_folder)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个 JSON 会生成一个 <code>.txt</code> 文件，与图片同名。</p><p>所有值都已归一化到 <code>[0, 1]</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标注 </tag>
            
            <tag> Yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas缺失数据处理</title>
      <link href="/2025/05/14/Pandas%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2025/05/14/Pandas%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="缺失值与空值"><a href="#缺失值与空值" class="headerlink" title="缺失值与空值"></a>缺失值与空值</h2><p>**缺省值：**数据集中数值为空的值, pandas使用<code>Nan</code> &#x2F; <code>NaT</code> 表示</p><p>**空值：**空字符串 <code>&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="literal">None</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>,<span class="literal">None</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2&#125;)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td></tr><tr><td>2</td><td>NaN</td><td>7.5</td></tr><tr><td>3</td><td>11.0</td><td>NaN</td></tr></tbody></table><h2 id="缺失值判断"><a href="#缺失值判断" class="headerlink" title="缺失值判断"></a>缺失值判断</h2><p>判断方法：</p><ul><li><code>pd.isnull()</code>：缺省值对应的值为True，返回值为Boolean的Series或者DataFrame对象</li><li><code>pd.notnull()</code>：缺省值对应的值为False，返回值为Boolean的Series或者DataFrame对象</li><li><code>pdata.isnull()</code> &#x2F; <code>pdata.notnull()</code> ：同上</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sdata = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, np.NaN])</span><br><span class="line">pd.isnull(sdata)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">3</span>     <span class="literal">True</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="literal">None</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>,<span class="literal">None</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2&#125;)</span><br><span class="line">pd.isnull(pdata)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th></tr></thead><tbody><tr><td>0</td><td>False</td><td>False</td></tr><tr><td>1</td><td>False</td><td>False</td></tr><tr><td>2</td><td>True</td><td>False</td></tr><tr><td>3</td><td>False</td><td>True</td></tr></tbody></table><h2 id="判断是否有缺失值"><a href="#判断是否有缺失值" class="headerlink" title="判断是否有缺失值"></a>判断是否有缺失值</h2><p><strong>方式1：</strong><code>np.all</code> 与 <code>pd.notnull</code>结合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="literal">None</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>,<span class="literal">None</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2&#125;)</span><br><span class="line"><span class="comment"># pd.notnull,若包含缺省值，缺省值对应值为False</span></span><br><span class="line"><span class="comment"># np.all：若对象中包含假，返回False， 否则返回真</span></span><br><span class="line">np.<span class="built_in">all</span>(pd.notnull(pdata))</span><br><span class="line"><span class="comment"># 返回False， 说明包含缺省值，否则不包含缺省值</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2&#125;)</span><br><span class="line">np.<span class="built_in">all</span>(pd.notnull(pdata))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>方式2：</strong><code>np.any</code> 与 <code>pd.isnull</code>结合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2&#125;)</span><br><span class="line"><span class="comment"># isnull：缺省值对应值为True</span></span><br><span class="line"><span class="comment"># any:对象中包含真，返回True</span></span><br><span class="line">np.<span class="built_in">any</span>(pd.isnull(pdata))</span><br><span class="line"><span class="comment"># 返回False,说明不含缺省值，返回True说明包括缺省值</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="缺省值处理方式"><a href="#缺省值处理方式" class="headerlink" title="缺省值处理方式"></a>缺省值处理方式</h2><p>缺省值处理：</p><ul><li>过滤缺省值(按行列)</li><li>删除缺省值(按行列)</li><li>填充值，填充值方式：</li><li>插入均值，中位数,最大值，最小值等</li><li>插入特殊值</li><li>插入前(后)值入前(后)值</li></ul><h3 id="缺省值过滤"><a href="#缺省值过滤" class="headerlink" title="缺省值过滤"></a>缺省值过滤</h3><p>举例：某两只股票1周收盘值，None表示当前停盘</p><p>需求：获取两只股票都没有停牌的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据：某两只股票1周收盘值，None表示当前停盘</span></span><br><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="literal">None</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>,<span class="literal">None</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2&#125;)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td></tr><tr><td>2</td><td>NaN</td><td>7.5</td></tr><tr><td>3</td><td>11.0</td><td>NaN</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：获取两只股票都没有停牌的数据</span></span><br><span class="line"><span class="comment"># 获取boolean索引</span></span><br><span class="line">bindex = np.<span class="built_in">all</span>(pdata.notnull(), axis=<span class="number">1</span>)</span><br><span class="line">bindex</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">2</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">3</span>    <span class="literal">False</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取没有停牌数据</span></span><br><span class="line">pdata[bindex]</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td></tr></tbody></table><h3 id="删除缺省值"><a href="#删除缺省值" class="headerlink" title="删除缺省值"></a>删除缺省值</h3><p><code>pdata.dropna(axis=0, how=&#39;any&#39;, thresh=None, subset=None, inplace=False)</code></p><p>主要参数：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>axis</td><td>0 或 ‘index’：按行操作，1 或 ‘columns’：按列操作</td></tr><tr><td>how</td><td>根据 axis 指定操作方式，any：只要有一个 Na 就删除，all：全部为 Na 才删除</td></tr><tr><td>thresh</td><td>指定非 Na 值的数量，非 Na 数量大于等于 thresh 时不删除</td></tr><tr><td>subset</td><td>指定操作的列子集</td></tr><tr><td>inplace</td><td>True：在原始数据中进行修改</td></tr></tbody></table><p>准备数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = [<span class="number">10</span>, <span class="number">10.5</span>, <span class="literal">None</span>, <span class="number">11</span>]</span><br><span class="line">s2 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>,<span class="literal">None</span>]</span><br><span class="line">s3 = [<span class="number">7</span>, <span class="number">6.9</span>,<span class="number">7.5</span>,<span class="number">7</span>]</span><br><span class="line">s4 = [<span class="literal">None</span>, <span class="number">6.9</span>,<span class="literal">None</span>,<span class="number">7.2</span>]</span><br><span class="line">pdata = pd.DataFrame(&#123;<span class="string">&#x27;s1&#x27;</span>:s1, <span class="string">&#x27;s2&#x27;</span>:s2, <span class="string">&#x27;s3&#x27;</span>:s3,<span class="string">&#x27;s4&#x27;</span>:s4&#125;)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th><th>s3</th><th>s4</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td><td>7.0</td><td>NaN</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td><td>6.9</td><td>6.9</td></tr><tr><td>2</td><td>NaN</td><td>7.5</td><td>7.5</td><td>NaN</td></tr><tr><td>3</td><td>11.0</td><td>NaN</td><td>7.0</td><td>7.2</td></tr></tbody></table><p>需求：</p><ol><li>删除包含缺省值的行</li><li>删除包含2个缺省值行</li><li>删除指定列包含缺省值</li><li>删除包含缺省值的列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除包含缺省值行</span></span><br><span class="line">pdata.dropna()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th><th>s3</th><th>s4</th></tr></thead><tbody><tr><td>1</td><td>10.5</td><td>6.9</td><td>6.9</td><td>6.9</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缺省值数量大于1，thresh设置为3</span></span><br><span class="line"><span class="comment"># thresh:指定非Na数量(非Na数量&gt;=thresh，不删除)</span></span><br><span class="line">pdata.dropna(thresh=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th><th>s3</th><th>s4</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td><td>7.0</td><td>NaN</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td><td>6.9</td><td>6.9</td></tr><tr><td>3</td><td>11.0</td><td>NaN</td><td>7.0</td><td>7.2</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定列：[&#x27;s1&#x27;,&#x27;s4&#x27;]</span></span><br><span class="line">pdata.dropna(subset=[<span class="string">&#x27;s1&#x27;</span>,<span class="string">&#x27;s4&#x27;</span>])</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s3</th></tr></thead><tbody><tr><td>0</td><td>7.0</td></tr><tr><td>1</td><td>6.9</td></tr><tr><td>2</td><td>7.5</td></tr><tr><td>3</td><td>7.0</td></tr></tbody></table><p>注意：</p><ul><li>以上数据删除都不对原始数据进行修改</li><li>指定inplace为True，在原始数据中进行修改</li></ul><h3 id="缺失值填充"><a href="#缺失值填充" class="headerlink" title="缺失值填充"></a>缺失值填充</h3><p>填充方法：</p><p><code>pdata.fillna(value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)</code></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code></td><td>填充值</td></tr><tr><td><code>method</code></td><td>填充方式：<code>&#123;&#39;backfill&#39;, &#39;bfill&#39;, &#39;pad&#39;, &#39;ffill&#39;, None&#125;</code></td></tr><tr><td><code>axis</code></td><td>指定行列：<code>0</code> 或 <code>&#39;index&#39;</code> 表示按行，<code>1</code> 或 <code>&#39;columns&#39;</code> 表示按列</td></tr><tr><td><code>limit</code></td><td>插入数量限制</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdata</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th><th>s3</th><th>s4</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td><td>7.0</td><td>NaN</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td><td>6.9</td><td>6.9</td></tr><tr><td>2</td><td>NaN</td><td>7.5</td><td>7.5</td><td>NaN</td></tr><tr><td>3</td><td>11.0</td><td>NaN</td><td>7.0</td><td>7.2</td></tr></tbody></table><p>需求：</p><ul><li>缺省值填充固定值0</li><li>使用前&#x2F;后面数据填充</li><li>使用均值填充</li><li>插入均值插入均值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 固定值0</span></span><br><span class="line">pdata.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>s1</th><th>s2</th><th>s3</th><th>s4</th></tr></thead><tbody><tr><td>0</td><td>10.0</td><td>7.0</td><td>7.0</td><td>0.0</td></tr><tr><td>1</td><td>10.5</td><td>6.9</td><td>6.9</td><td>6.9</td></tr><tr><td>2</td><td>0.0</td><td>7.5</td><td>7.5</td><td>0.0</td></tr><tr><td>3</td><td>11.0</td><td>0.0</td><td>7.0</td><td>7.2</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用前一行数据填充</span></span><br><span class="line">pdata.fillna(method=<span class="string">&#x27;ffill&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用向前填充 (ffill) 替代 fillna</span></span><br><span class="line">pdata.ffill()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用后一行数据填充</span></span><br><span class="line">pdata.fillna(method=<span class="string">&#x27;bfill&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用向后填充 (bfill) 替代 fillna</span></span><br><span class="line">pdata.bfill()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用后一列数据填充</span></span><br><span class="line">pdata.fillna(axis=<span class="number">1</span>,method=<span class="string">&#x27;bfill&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用向后填充 (bfill) 替代 fillna</span></span><br><span class="line">pdata.bfill(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>对于股票缺省值，我们倾向于，使用前一天数据填充缺失值</p><h3 id="插入均值，中位数，最大值，最小值"><a href="#插入均值，中位数，最大值，最小值" class="headerlink" title="插入均值，中位数，最大值，最小值"></a>插入均值，中位数，最大值，最小值</h3><p><code>pdata.mean/max/min/median(axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p><p>主要参数：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>axis</code></td><td>方向，<code>0</code> 表示按列，<code>1</code> 表示按行</td></tr><tr><td><code>skipna</code></td><td>是否忽略 NaN，<code>True</code> 表示不计算 NaN，默认为 <code>True</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入均值</span></span><br><span class="line">pdata.fillna(pdata.mean())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入中位数</span></span><br><span class="line">pdata.fillna(pdata.median())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas数据导入与保存</title>
      <link href="/2025/05/14/Pandas%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E4%BF%9D%E5%AD%98/"/>
      <url>/2025/05/14/Pandas%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%B8%8E%E4%BF%9D%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>目的：</p><ul><li><p>数据导入：excel, csv文件</p></li><li><p>数据导出</p></li><li><p>基本统计</p></li><li><p>缺省数据处理</p></li></ul><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a><strong>数据导入</strong></h2><p>数据是分析基础，实际工作中，数据来自于企业内部数据，网络数据，开源数据集；</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>pd.read_csv(filepath_or_buffer, sep=&#39;,&#39;, delimiter=None, header=&#39;infer&#39;, names=None, index_col=None, ...)</code></td><td align="left">读取CSV文件</td></tr><tr><td align="left"><code>pd.read_excel(io, sheet_name=0, names=None, index_col=None, usecols=None, ...)</code></td><td align="left">读取Excel文件</td></tr><tr><td align="left"><code>pd.read_json(path_or_buf=None, orient=None, typ=&#39;frame&#39;, dtype=None, ...)</code></td><td align="left">读取JSON文件</td></tr></tbody></table><p><strong>读取excel文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取excel文件</span></span><br><span class="line">fpath = <span class="string">r&#x27;data\test.xlsx&#x27;</span></span><br><span class="line">pdata = pd.read_excel(fpath)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><p><strong>读取csv文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取csv文件</span></span><br><span class="line">fpath = <span class="string">r&#x27;data\GDP.csv&#x27;</span></span><br><span class="line">pdata = pd.read_csv(fpath, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><p><strong>导入csv指定列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入指定列</span></span><br><span class="line">fpath = <span class="string">r&#x27;data\GDP.csv&#x27;</span></span><br><span class="line">pdata = pd.read_csv(fpath,usecols = [<span class="string">&#x27;Country Name&#x27;</span>,<span class="string">&#x27;1990&#x27;</span>], encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><p><strong>导入csv指定表头</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入指定表头</span></span><br><span class="line">fpath = <span class="string">r&#x27;data\GDP.csv&#x27;</span></span><br><span class="line">pdata = pd.read_csv(fpath,header=<span class="number">1</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><p><strong>csv无表头指定None</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无表头指定None</span></span><br><span class="line">pdata = pd.read_csv(fpath,header=<span class="literal">None</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><h2 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a><strong>数据保存</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存文件</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 读取excel文件</span></span><br><span class="line">fpath = <span class="string">r&#x27;data\GDP.csv&#x27;</span></span><br><span class="line">csv_path1 = <span class="string">r&#x27;data\new_GDP_1.csv&#x27;</span></span><br><span class="line">csv_path2 = <span class="string">r&#x27;data\new_GDP_2.csv&#x27;</span></span><br><span class="line">csv_path3 = <span class="string">r&#x27;data\new_GDP_3.csv&#x27;</span></span><br><span class="line">pdata = pd.read_csv(fpath, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存格式带索引</span></span><br><span class="line">pdata.to_csv(csv_path1)</span><br><span class="line"><span class="comment"># 保存格式不带索引</span></span><br><span class="line">pdata.to_csv(csv_path2, index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 保存格式不带索引,保存指定列</span></span><br><span class="line">pdata.to_csv(csv_path3, index=<span class="literal">False</span>, columns=[<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;1991&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda备忘录</title>
      <link href="/2025/05/08/Anaconda%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2025/05/08/Anaconda%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像源设置"><a href="#镜像源设置" class="headerlink" title="镜像源设置"></a>镜像源设置</h2><p>在命令行中临时设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install some-package -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>使用conda环境中的pip命令前激活镜像源环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install some-package</span><br></pre></td></tr></table></figure><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n xxx python=xxx</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> remove -n xxx</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>高级系统设置-环境变量-系统变量-Path</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Tools\anaconda3</span><br><span class="line">D:\Tools\anaconda3\Scripts</span><br><span class="line">D:\Tools\anaconda3\Library\bin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas基础——DataFrame数据结构</title>
      <link href="/2025/05/08/Pandas%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94DataFrame%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2025/05/08/Pandas%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94DataFrame%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><strong>DataFrame:</strong> 多种类型的列构成的二维标签数据结构(多列)</p><p>DataFrame类:</p><p><code>pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)</code></p><p>参数：</p><p><strong>data:</strong> 一维数据，二维数据<br><strong>index:</strong> 行标签<br><strong>columns:</strong> 列标签</p><h3 id="1-Dataframe创建"><a href="#1-Dataframe创建" class="headerlink" title="1. Dataframe创建"></a>1. Dataframe创建</h3><p><strong>一行一列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维数</span></span><br><span class="line">pd.DataFrame(data=np.arange(<span class="number">1</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr></tbody></table><p><strong>多列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多维数据 data为4X4</span></span><br><span class="line">data = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">pd.DataFrame(data=data)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>2</td><td>8</td><td>9</td><td>10</td><td>11</td></tr><tr><td>3</td><td>12</td><td>13</td><td>14</td><td>15</td></tr></tbody></table><p><strong>设置index与columns</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置index与columns</span></span><br><span class="line">data = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">pdata = pd.DataFrame(data=data, index=<span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>), columns=[<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>,<span class="string">&#x27;c3&#x27;</span>,<span class="string">&#x27;c4&#x27;</span>])</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置index与columns</span></span><br><span class="line">data = &#123;<span class="string">&#x27;c1&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;c2&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;</span><br><span class="line">pdata = pd.DataFrame(data=data)</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><p><strong>设置列标签</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置列标签</span></span><br><span class="line">pdata.columns = [<span class="string">&#x27;t1&#x27;</span>,<span class="string">&#x27;t2&#x27;</span>]</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><h3 id="2-DataFrame对象访问"><a href="#2-DataFrame对象访问" class="headerlink" title="2. DataFrame对象访问"></a>2. DataFrame对象访问</h3><p><strong>获取指定列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取一列数据，返回Series对象</span></span><br><span class="line">pdata[<span class="string">&#x27;c1&#x27;</span>]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line">Name: c1, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取多列数据</span></span><br><span class="line">pdata[[<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>]]</span><br></pre></td></tr></table></figure><p>输出：</p><table><thead><tr><th></th><th>c1</th><th>c2</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>4</td></tr><tr><td>1</td><td>2</td><td>5</td></tr><tr><td>2</td><td>3</td><td>6</td></tr></tbody></table><p><strong>loc操作</strong></p><p>loc操作：使用类似列表方式去对数据进行访问，支持bool索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一行</span></span><br><span class="line">pdata.loc[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取第一行指定c1,c2列</span></span><br><span class="line">pdata.loc[<span class="number">0</span>,[<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取列索引</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pdata:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1</span><br><span class="line">c2</span><br><span class="line">c3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按列遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pdata.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;c1&#x27;</span>, <span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line">Name: c1, dtype: int64)</span><br><span class="line">(<span class="string">&#x27;c2&#x27;</span>, <span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6</span></span><br><span class="line">Name: c2, dtype: int64)</span><br><span class="line">(<span class="string">&#x27;c3&#x27;</span>, <span class="number">0</span>    <span class="number">7</span></span><br><span class="line"><span class="number">1</span>    <span class="number">8</span></span><br><span class="line"><span class="number">2</span>    <span class="number">9</span></span><br><span class="line">Name: c3, dtype: int64)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按行遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pdata.iterrows():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, c1    <span class="number">1</span></span><br><span class="line">c2    <span class="number">4</span></span><br><span class="line">c3    <span class="number">7</span></span><br><span class="line">Name: <span class="number">0</span>, dtype: int64)</span><br><span class="line">(<span class="number">1</span>, c1    <span class="number">2</span></span><br><span class="line">c2    <span class="number">5</span></span><br><span class="line">c3    <span class="number">8</span></span><br><span class="line">Name: <span class="number">1</span>, dtype: int64)</span><br><span class="line">(<span class="number">2</span>, c1    <span class="number">3</span></span><br><span class="line">c2    <span class="number">6</span></span><br><span class="line">c3    <span class="number">9</span></span><br><span class="line">Name: <span class="number">2</span>, dtype: int64)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-DataFrame修改"><a href="#3-DataFrame修改" class="headerlink" title="3. DataFrame修改"></a>3. DataFrame修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">&#x27;c1&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;c2&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c3&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">pdata = pd.DataFrame(data=data)</span><br><span class="line"><span class="comment"># 修改c1列值</span></span><br><span class="line">pdata[<span class="string">&#x27;c1&#x27;</span>] = <span class="number">0</span></span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame插入列</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">&#x27;c1&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;c2&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c3&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">pdata = pd.DataFrame(data=data)</span><br><span class="line"><span class="comment"># 修改c1列值</span></span><br><span class="line">pdata[<span class="string">&#x27;c4&#x27;</span>] = [-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame插入行</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">&#x27;c1&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;c2&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c3&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;</span><br><span class="line">pdata = pd.DataFrame(data=data)</span><br><span class="line"><span class="comment"># 修改c1列值</span></span><br><span class="line">pdata.loc[<span class="number">3</span>] = [-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>]</span><br><span class="line">pdata</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas基础——Series数据结构</title>
      <link href="/2025/05/07/Pandas%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Series%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2025/05/07/Pandas%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Series%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Series数据结构"><a href="#Series数据结构" class="headerlink" title="Series数据结构"></a>Series数据结构</h2><h3 id="1-创建Series对象"><a href="#1-创建Series对象" class="headerlink" title="1. 创建Series对象"></a>1. 创建Series对象</h3><p>pd.Series 是 Pandas 库中用于创建一维数组的函数</p><p><strong>data:</strong> 可以是多种数据类型，如列表、元组、字典、NumPy 数组等</p><p><strong>index:</strong> 可以是列表、元组等可迭代对象，其长度需要和 data 的长度一致。如果不指定 index，默认会使用从 0 开始的整数作为索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s_data = pd.Series(</span><br><span class="line">    data=np.arange(<span class="number">1</span>,<span class="number">4</span>),</span><br><span class="line">    index=<span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>)    </span><br><span class="line">)</span><br><span class="line">s_data</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int32</span><br></pre></td></tr></table></figure><h3 id="2-Series对象访问"><a href="#2-Series对象访问" class="headerlink" title="2. Series对象访问"></a>2. Series对象访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s_data.iloc[<span class="number">0</span>]</span><br><span class="line">s_data.loc[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">s_data[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-获取index与value"><a href="#3-获取index与value" class="headerlink" title="3. 获取index与value"></a>3. 获取index与value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line">s_data.index</span><br><span class="line"><span class="comment"># 获取值</span></span><br><span class="line">s_data.values</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Index([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="4-将index与value转成列表"><a href="#4-将index与value转成列表" class="headerlink" title="4. 将index与value转成列表"></a>4. 将index与value转成列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将索引转换成列表</span></span><br><span class="line">s_data.index.tolist()</span><br><span class="line"><span class="comment"># 将数据转换成列表</span></span><br><span class="line">s_data.values.tolist()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="5-Series对象访问"><a href="#5-Series对象访问" class="headerlink" title="5. Series对象访问"></a>5. Series对象访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s_data.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地仓库关联GitHub远程仓库</title>
      <link href="/2025/05/06/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2025/05/06/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><strong>步骤一：创建GitHub仓库</strong></p><ol><li>登录GitHub</li><li>点击右上角的 <strong>+</strong>，选择 <strong>New repository</strong></li><li>填写仓库名等信息，点击 <strong>Create repository</strong></li></ol><p><strong>步骤二：在本地初始化 Git 仓库（如果还没有）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-project-folder</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>步骤三：添加远程仓库地址</strong></p><p>复制 GitHub 仓库的地址（HTTPS 或 SSH）：</p><p>例如：</p><ul><li><strong>HTTPS:</strong> <code>https://github.com/your-username/your-repo.git</code></li><li><strong>SSH:</strong> <code>git@github.com:your-username/your-repo.git</code></li></ul><p>在本地仓库中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/your-username/your-repo.git</span><br></pre></td></tr></table></figure><p>或者（用 SSH）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:your-username/your-repo.git</span><br></pre></td></tr></table></figure><p><strong>步骤四：推送本地代码到 GitHub</strong></p><p>第一次推送代码，并设置上游分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin master  <span class="comment"># 如果主分支是 master</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main  <span class="comment"># 如果主分支是 main</span></span><br></pre></td></tr></table></figure><p><strong>检查是否关联成功</strong></p><p>运行下面命令查看远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>输出应包含 GitHub 的仓库地址。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统重启cifs自动挂载设置</title>
      <link href="/2025/04/15/%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%90%AFcifs%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E8%AE%BE%E7%BD%AE/"/>
      <url>/2025/04/15/%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%90%AFcifs%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步-为每个账户创建单独的-credentials-文件"><a href="#第一步-为每个账户创建单独的-credentials-文件" class="headerlink" title="第一步 为每个账户创建单独的 credentials 文件"></a>第一步 为每个账户创建单独的 <code>credentials</code> 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/samba/账户1</span><br></pre></td></tr></table></figure><p>内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=xxx</span><br><span class="line"><span class="attr">password</span>=xxx</span><br></pre></td></tr></table></figure><p>设置权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 600 /etc/samba/账户1</span><br></pre></td></tr></table></figure><h3 id="第二步-编辑-etc-fstab-文件"><a href="#第二步-编辑-etc-fstab-文件" class="headerlink" title="第二步 编辑 /etc/fstab 文件"></a>第二步 编辑 <code>/etc/fstab</code> 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/fstab</span><br></pre></td></tr></table></figure><p>在文件末尾添加一行来配置自动挂载：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">挂载路径  挂载点  cifs  <span class="attr">credentials</span>=/etc/samba/用户<span class="number">1</span>,vers=<span class="number">3.0</span>,iocharset=utf8  <span class="number">0</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>挂载路径：</strong></p><ul><li>这是共享路径。</li></ul><p><strong>挂载点：</strong></p><ul><li>本地挂载点，表示挂载的位置。</li></ul><p><strong><code>cifs</code>：</strong></p><ul><li>指定使用 CIFS 文件系统（用于挂载网络共享）。</li></ul><p><strong>挂载选项：</strong></p><ul><li><code>credentials</code>：指定凭据文件。</li><li><code>vers=2.1</code>：指定 SMB 协议版本（如共享服务器使用 SMB 2.1）。</li><li><code>iocharset=utf8</code>：支持中文文件名等 UTF-8 字符。</li></ul><p><strong>最后两个数字：</strong></p><ul><li><code>0</code>：转储频率，通常为 0（不转储）。</li><li><code>0</code>：文件系统检查顺序，通常为 0（不检查）。</li></ul><h3 id="第三步-测试挂载"><a href="#第三步-测试挂载" class="headerlink" title="第三步 测试挂载"></a>第三步 测试挂载</h3><p><code>sudo mount -a</code> 是一种常用的 Linux 命令，主要用于根据 <code>/etc/fstab</code> 文件中的配置挂载所有<strong>未挂载</strong>的文件系统。</p><p><em>挂载丢失后也可以使用这个命令</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -a</span><br></pre></td></tr></table></figure><p>如果没有报错，可以通过以下命令验证挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><h3 id="第四步-nfs配置"><a href="#第四步-nfs配置" class="headerlink" title="第四步 nfs配置"></a>第四步 nfs配置</h3><p>使用文本编辑器打开 <code>/etc/fstab</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/fstab</span><br></pre></td></tr></table></figure><p>NFS 默认不使用用户名&#x2F;密码，而是依赖 IP 地址和文件系统权限进行控制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzeds2.scc.com:/G2AOI/AOI/Archive  /home/workspace/AOI/Archive  nfs  vers=3,tcp,nolock,async,mountproto=tcp,rsize=1048576,wsize=1048576  0  0</span><br></pre></td></tr></table></figure><p><strong>服务器路径</strong></p><ul><li><strong><code>gzeds2.scc.com:/G2AOI/AOI/Archive</code></strong>：<br>表示 NFS 服务器地址 <code>gzeds2.scc.com</code> 和共享目录 <code>/G2AOI/AOI/Archive</code>。</li></ul><p><strong>本地挂载点</strong></p><ul><li><strong><code>/home/workspace/AOI/Archive</code></strong>：<br>本地挂载目录，挂载成功后，NFS 的内容将显示在此目录下。</li></ul><p><strong>文件系统类型</strong></p><ul><li><strong><code>nfs</code></strong>：<br>指定使用 NFS 文件系统挂载。</li></ul><p><strong>挂载选项</strong></p><ul><li><strong><code>vers=3</code></strong>：使用 NFSv3 协议。</li><li><strong><code>tcp</code></strong>：使用 TCP 协议代替 UDP，通常更稳定，适合大文件传输。</li><li><strong><code>nolock</code></strong>：禁用文件锁定机制（适用于某些不需要锁的应用场景）。</li><li><strong><code>async</code></strong>：启用异步写入，提高性能。</li><li><strong><code>mountproto=tcp</code></strong>：指定挂载协议为 TCP。</li><li><strong><code>rsize=1048576,wsize=1048576</code></strong>：设置读写缓冲区大小为 1MB，提高传输性能。</li></ul><p><strong><code>0 0</code></strong></p><ul><li>第一个 <code>0</code>：不使用 <code>dump</code> 工具备份。</li><li>第二个 <code>0</code>：不检查文件系统。</li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置samba共享目录</title>
      <link href="/2025/04/14/%E8%AE%BE%E7%BD%AEsamba%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/"/>
      <url>/2025/04/14/%E8%AE%BE%E7%BD%AEsamba%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-检查Samba服务状态"><a href="#1-检查Samba服务状态" class="headerlink" title="1.检查Samba服务状态"></a>1.检查Samba服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status smbd</span><br><span class="line"><span class="built_in">sudo</span> systemctl status nmbd</span><br></pre></td></tr></table></figure><p><strong>输出示例（服务已启动）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● smbd.service - Samba SMB/CIFS server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Fri 2025-01-10 10:00:00 UTC; 5min ago</span><br></pre></td></tr></table></figure><p><strong>输出示例（服务未启动）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">● smbd.service - Samba SMB/CIFS server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br></pre></td></tr></table></figure><p><strong>如果Samba服务未启动，可以使用以下命令启动或重启：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start smbd</span><br><span class="line"><span class="built_in">sudo</span> systemctl start nmbd</span><br></pre></td></tr></table></figure><p><strong>重启服务（确保加载最新配置）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart nmbd</span><br></pre></td></tr></table></figure><h3 id="2-查看SMB用户"><a href="#2-查看SMB用户" class="headerlink" title="2. 查看SMB用户"></a>2. 查看SMB用户</h3><p><strong>使用<code>smbpasswd</code>查看本地SMB用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pdbedit -L</span><br></pre></td></tr></table></figure><p>​输出示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:0:root</span><br></pre></td></tr></table></figure><p><strong>添加SMB用户(必须先是系统用户):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -a username</span><br></pre></td></tr></table></figure><p><strong>启用用户：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -e username</span><br></pre></td></tr></table></figure><p><strong>删除SMB用户：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -x username</span><br></pre></td></tr></table></figure><h3 id="3-编辑-Samba-配置文件-etc-samba-smb-conf："><a href="#3-编辑-Samba-配置文件-etc-samba-smb-conf：" class="headerlink" title="3.编辑 Samba 配置文件 /etc/samba/smb.conf："></a>3.编辑 Samba 配置文件 <code>/etc/samba/smb.conf</code>：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p><strong>在文件末尾添加共享配置：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[共享目录别名]</span></span><br><span class="line"><span class="attr">path</span> = 实际目录绝对路径</span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">writable</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">yes</span></span><br><span class="line">create <span class="attr">mask</span> = <span class="number">0777</span></span><br><span class="line">directory <span class="attr">mask</span> = <span class="number">0777</span></span><br></pre></td></tr></table></figure><p><strong>配置解释：</strong></p><ul><li><code>path</code>：共享目录路径。</li><li><code>browseable</code>：是否可在网络浏览器中看到该共享。</li><li><code>writable</code>：是否允许写入。</li><li><code>guest ok</code>：是否允许匿名用户访问（无用户名密码）。</li><li><code>create mask</code> 和 <code>directory mask</code>：文件和目录的权限掩码。</li></ul><p><strong>如果你希望限制访问，可以在配置中加入：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid <span class="attr">users</span> = SMB用户名</span><br></pre></td></tr></table></figure><p> <strong>重启Samba服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart smbd</span><br><span class="line">sudo systemctl restart nmbd</span><br></pre></td></tr></table></figure><h3 id="4-挂载测试"><a href="#4-挂载测试" class="headerlink" title="4.挂载测试"></a>4.挂载测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t cifs //IP地址/共享目录别名 挂载地址 -o vers=3.0,username=SMB账户,password=密码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t cifs //10.65.233.37/vrs_jobs_test /home/workspace/projects/aoi_project/data/vrs_jobs_test -o vers=3.0,username=root,password=Baidu@123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云OpenCloudOS系统下安装ngnix报错</title>
      <link href="/2025/04/14/%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85ngnix%E6%8A%A5%E9%94%99/"/>
      <url>/2025/04/14/%E8%85%BE%E8%AE%AF%E4%BA%91OpenCloudOS%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85ngnix%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：</strong></p><p>腾讯云OpenCloudOS 9系统下使用yum安装ngnix时报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-7-opencloudos /]# yum install nginx -y</span><br><span class="line">Last metadata expiration check: 0:00:41 ago on Mon 14 Apr 2025 01:01:27 AM CST.</span><br><span class="line">Error: </span><br><span class="line"> Problem: cannot install the best candidate <span class="keyword">for</span> the job</span><br><span class="line">  - nothing provides libcrypt.so.2()(64bit) needed by nginx-2:1.26.3-1.el9.ngx.x86_64 from nginx-stable</span><br><span class="line">  - nothing provides libcrypt.so.2(XCRYPT_2.0)(64bit) needed by nginx-2:1.26.3-1.el9.ngx.x86_64 from nginx-stable</span><br><span class="line">(try to add <span class="string">&#x27;--skip-broken&#x27;</span> to skip uninstallable packages or <span class="string">&#x27;--nobest&#x27;</span> to use not only best candidate packages)</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>用 <code>--nobest</code> 选项尝试安装不那么新的 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install nginx --nobest -y</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  nginx-1.26.2-2.oc9.ap.2.x86_64 nginx-core-1.26.2-2.oc9.ap.2.x86_64 nginx-filesystem-1.26.2-2.oc9.ap.2.noarch system-logos-httpd-1.0.4-1.oc9.noarch</span><br><span class="line">Skipped:</span><br><span class="line">  nginx-2:1.26.3-1.el9.ngx.x86_64</span><br></pre></td></tr></table></figure><p>这个选项会跳过“最佳匹配”版本，可能会选一个不依赖 <code>libcrypt.so.2</code> 的旧版 nginx。</p><table><thead><tr><th>包名版本</th><th>提供方</th><th>说明</th></tr></thead><tbody><tr><td><code>nginx-1.26.2-2.oc9.ap.2</code></td><td>OpenCloudOS 社区</td><td>为 oc9 系统构建，兼容性更好</td></tr><tr><td><code>nginx-1.26.3-1.el9.ngx</code></td><td>NGINX 官方</td><td>最新稳定版，但可能依赖更新的系统库（比如 <code>libcrypt.so.2</code>）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ngnix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex公式</title>
      <link href="/2024/07/31/LaTex%E5%85%AC%E5%BC%8F/"/>
      <url>/2024/07/31/LaTex%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/LaTex/l1.png"></p><p><img src="/../images/LaTex/l2.png"></p><p><img src="/../images/LaTex/l3.png"></p><p><img src="/../images/LaTex/l4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>charles抓包</title>
      <link href="/2024/07/02/charles%E6%8A%93%E5%8C%85/"/>
      <url>/2024/07/02/charles%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Charles抓包"><a href="#Charles抓包" class="headerlink" title="Charles抓包"></a>Charles抓包</h1><p>安装证书</p><p><img src="/../images/charles%E6%8A%93%E5%8C%85/image-20240702094854598.png" alt="image-20240702094854598"></p><p><img src="/../images/charles%E6%8A%93%E5%8C%85/image-20240702094923499.png" alt="image-20240702094923499"></p><p><img src="/../images/charles%E6%8A%93%E5%8C%85/image-20240702094940836.png" alt="image-20240702094940836"></p><p><img src="/../images/charles%E6%8A%93%E5%8C%85/image-20240702095002286.png" alt="image-20240702095002286"></p><p>代理设置</p><p><img src="/../images/charles%E6%8A%93%E5%8C%85/image-20240702095152736.png" alt="image-20240702095152736"></p><p><img src="/../images/charles%E6%8A%93%E5%8C%85/image-20240702095225274.png" alt="image-20240702095225274"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="/2024/07/01/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2024/07/01/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>方式一</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone</span><br></pre></td></tr></table></figure><h2 id="数据管理和文件状态"><a href="#数据管理和文件状态" class="headerlink" title="数据管理和文件状态"></a>数据管理和文件状态</h2><p>git本地数据管理分三个区域：<strong>工作区</strong>、<strong>暂存区</strong>和<strong>本地仓库</strong></p><p><strong>工作区</strong>：资源管理器里的文件夹</p><p><strong>暂存区</strong>：临时区域，用于保存即将提交到git仓库的修改内容</p><p><strong>本地仓库</strong>：用<strong>git init</strong>创建的仓库，存储代码和版本信息的主要位置</p><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701094928777.png" alt="image-20240701094928777"></p><p>git中文件有四种状态：<strong>未跟踪</strong>、<strong>未修改</strong>、<strong>已修改</strong>、<strong>已暂存</strong></p><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701095501351.png" alt="image-20240701095501351"></p><h2 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h2><p>检查当前文件状态</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-<span class="built_in">date</span> with &#x27;origin/master&#x27;.</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>添加到暂存区</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure><p>取消添加暂存</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached &lt;file&gt;...</span><br></pre></td></tr></table></figure><p>提交跟新</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><p>查看提交记录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><h2 id="git-reset回退版本"><a href="#git-reset回退版本" class="headerlink" title="git reset回退版本"></a>git reset回退版本</h2><p>reset的三种模式：soft、hard、mixed</p><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701102123441.png" alt="image-20240701102123441"></p><p>回溯之前的操作:</p><p>reflog查看之前的操作，找到版本号</p><p>reset到版本位置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog </span><br><span class="line">$ git reset b270efb</span><br></pre></td></tr></table></figure><h2 id="git-diff-查看差异"><a href="#git-diff-查看差异" class="headerlink" title="git diff 查看差异"></a>git diff 查看差异</h2><p><strong>git diff</strong>默认比较工作区和暂存区差异</p><p><strong>git diff HEAD</strong>比较工作区和版本库之间的差异</p><p><strong>git diff –cache</strong>比较暂存区和版本库之间的差异</p><p>**git diff &lt;版本一&gt; &lt;版本二&gt;**比较两个版本之间的差异</p><p><strong>git diff &lt;版本ID&gt; HEAD</strong>比较版本ID和分支最新提交节点的差异</p><p><strong>git diff HEAD~ HEAD</strong>比较上个版本和当前版本的差异（~可以替换为^）</p><p><strong>git diff HEAD~2 HEAD</strong>比较提交之前的第二个版本和当前版本的差异</p><p><strong>git diff HEAD~2 HEAD file3.txt</strong>比较提交之前的第二个版本和当前版本<strong>flie3.txt</strong>的差异</p><p><img src="/./../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/dff26111c327b5005333b65bbfb5c65f.png" alt="dff26111c327b5005333b65bbfb5c65f"></p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701111902355.png" alt="image-20240701111902355"></p><h2 id="gitignore忽略文件"><a href="#gitignore忽略文件" class="headerlink" title=".gitignore忽略文件"></a>.gitignore忽略文件</h2><p>应该忽略哪些文件？</p><ol><li>系统或者软件自动生成的文件</li><li>编译产生的中间文件和结果文件</li><li>运行时生成日志文件、缓存文件、临时文件</li><li>涉及身份、密码、口令、秘钥等敏感信息文件</li></ol><p>忽略文件夹用&#x2F;结尾，如temp&#x2F;</p><h2 id="SSH配置和克隆仓库"><a href="#SSH配置和克隆仓库" class="headerlink" title="SSH配置和克隆仓库"></a>SSH配置和克隆仓库</h2><p>生成SSH key：ssh-keygen -t rsa -b 4096</p><p>克隆仓库：git clone</p><p>推送跟新内容：git push <remote> <branch></p><p>拉取跟新内容：git pull <remote></p><h2 id="关联本地仓库和远程仓库"><a href="#关联本地仓库和远程仓库" class="headerlink" title="关联本地仓库和远程仓库"></a>关联本地仓库和远程仓库</h2><p>添加远程仓库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;远程仓库别名&gt; &lt;远程仓库地址&gt;</span><br><span class="line">$ git push -u &lt;远程仓库名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>查看远程仓库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><p>拉取远程仓库内容</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="分支简介和基本操作"><a href="#分支简介和基本操作" class="headerlink" title="分支简介和基本操作"></a>分支简介和基本操作</h2><p>查看当前仓库所有分支</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;分支名&gt;</span><br><span class="line">$ git switch &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>合并分支 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;将要合并的分支&gt;</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;已合并的分支&gt;</span><br><span class="line">$ git branch -D &lt;未合并的分支&gt;</span><br></pre></td></tr></table></figure><p>终止合并</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --abort</span><br></pre></td></tr></table></figure><h2 id="回退和rebase"><a href="#回退和rebase" class="headerlink" title="回退和rebase"></a>回退和rebase</h2><p>恢复删除的分支</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;分支名&gt; &lt;分支id&gt;</span><br></pre></td></tr></table></figure><p>rebase改基</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git switch dev</span><br><span class="line">$ git rebase main</span><br></pre></td></tr></table></figure><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701155504897.png" alt="image-20240701155504897"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git switch mian</span><br><span class="line">$ git rebase dec</span><br></pre></td></tr></table></figure><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701155620386.png" alt="image-20240701155620386"></p><p><strong>merge</strong></p><p>优点:不会破坏原分支的提交历史，方便回溯和查看</p><p>缺点:会产生额外的提交节点，分支图比较复杂</p><p><strong>rebase</strong></p><p>优点:不会新增额外的提交记录，形成线性历史，比较直观和干净</p><p>缺点::会改变提交历史，改变了当前分支branch out的节点，避免在共享分支使用</p><h2 id="分支管理和工作流模型"><a href="#分支管理和工作流模型" class="headerlink" title="分支管理和工作流模型"></a>分支管理和工作流模型</h2><p>GitFlow 是一种流程模型，用于在Git上管理软件开发项目。</p><p>**主分支(master&#x2F;main)：**代表了项目的稳定版本，每个提交到主分支的代码都应该是经过测试和审核的。</p><p>**开发分支(develop)：**用于日常开发。所有的功能分支、发布分支和修补分支都应该从开发分支派生出来。</p><p>**功能分支(feature)：**用于开发单独的功能或者特性。每个功能分支都应该从开发分支派生，并在开发完成后合并回开发分支。</p><p>**发布分支(release)：**用于准备项目发布。发布分支应该从开发分支派生，并在准备好发布版本后合并回主分支和开发分支。</p><p>**热修复分支(hotfix)：**用于修复主分支上的紧急问题。热修复分支应该从主分支派生，并在修复完成后，合并回主分支和开发分支。</p><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/image-20240701161341132.png" alt="image-20240701161341132"></p><h2 id="git指令一览表"><a href="#git指令一览表" class="headerlink" title="git指令一览表"></a>git指令一览表</h2><p><img src="/../images/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git-Cheet-Sheet-ByGeekHour.png" alt="Git-Cheet-Sheet-ByGeekHour"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陈</title>
      <link href="/2024/06/20/%E9%99%88/"/>
      <url>/2024/06/20/%E9%99%88/</url>
      
        <content type="html"><![CDATA[<h1 id="龙门——陈"><a href="#龙门——陈" class="headerlink" title="龙门——陈"></a>龙门——陈</h1><p><img src="/../images/%E9%99%88/%E7%AB%8B%E7%BB%98_%E9%99%88_1.png" alt="立绘_陈_1"></p><p>龙门近卫局警司，特别督察组组长。</p><p>负责龙门近卫局特别督察组的日常指挥执行工作。</p><p>魏彦吾的最得力的下属之一。拥有整个近卫局中最精湛的剑技以及最严苛的态度。态度极度强硬，对人一视同仁。看起来一点都不变通，总是一副凶着脸的样子。</p><h3 id="武器"><a href="#武器" class="headerlink" title="武器"></a>武器</h3><p>陈警司的爱剑名为“赤霄”，这并不是一个秘密。但鲜少有人知道，赤霄有七式——拔刀、泪锋、奔夜、扬眉、绝影、云裂、天瞠（cheng)</p><p>至于陈警司是不愿使用还是不能使用，恐怕就只有她本人知晓了</p><h3 id="陈证章"><a href="#陈证章" class="headerlink" title="陈证章"></a>陈证章</h3><p><img src="/../images/%E9%99%88/%E6%A8%A1%E7%BB%84_%E8%AF%81%E7%AB%A0.png" alt="模组_证章"></p><p>干员陈擅长于近身搏斗中对敌人造成多段杀伤</p><p>根据外勤部门决议</p><p>在外勤任务中划分为近卫干员，行使剑豪职责</p><p>特别颁发此证章</p><p>以兹证明</p><h3 id="招聘合同"><a href="#招聘合同" class="headerlink" title="招聘合同"></a>招聘合同</h3><p>龙门近卫局特别督察组组长陈，正依合约前来协助罗德岛的任务。</p><p>生气的时候很可怕，平常也最好别惹她。</p><h3 id="信物"><a href="#信物" class="headerlink" title="信物"></a>信物</h3><p>在漫长时光中尘封许久的物件。</p><p>她并非是将之忘记，而仅仅是不忍再次抚摸它锈蚀的棱角</p><p>兴许在某一天，它会重新焕发出过往的炽热吧。</p><h3 id="罗德岛制式剑"><a href="#罗德岛制式剑" class="headerlink" title="罗德岛制式剑"></a>罗德岛制式剑</h3><p><img src="/../images/%E9%99%88/%E6%A8%A1%E7%BB%84_%E7%BD%97%E5%BE%B7%E5%B2%9B%E5%88%B6%E5%BC%8F%E5%89%91.png" alt="模组_罗德岛制式剑"></p><p><strong>基础信息</strong></p><p>七月七，晴。生辰，她激动地想要为魏彦吾展示拔刀，却找不到魏彦吾的踪影。等了三天，没有等到。</p><p>五月十三，多云。以泪锋斩断了庭中的三十年老树，砸坏了屋顶。魏彦吾没有出现，只是差人植了一棵新的。她不再期待魏彦吾的认可。</p><p>一月一，大雨。贺年，倾盆大雨，去贫民区的途中路见不平，愤而出手，以一敌十五。生死攸关之际，以随身佩剑递出奔夜，伤七人，退八人。闹到了上面，魏彦吾难得出现，看了剑痕后，只看她一眼就走了。她忘了自己当时为何出手，却永远不会忘记那一眼中的失望。</p><p>十二月二十五，晴。从近卫学院返乡路上见义勇为，浑然无惧，扬眉之剑，当放则放。她意气风发，以为自己可以荡平天下不平事。</p><p>七月三十，多云。以昏迷五天为代价，递出绝影，最终斩了重大通缉犯，龙门陈晖洁，崭露头角。醒来之后，赤霄放在她的床头，魏彦吾没有来看过她。</p><p>八月十三，阴。追捕感染者罪犯途中，欲以赤霄出手，赤霄纹丝未动。而后，生死攸关之际，福至心灵，赤霄拔刀，斩塌了半个地下车库。她去找魏彦吾想知道赤霄究竟为何，魏彦吾没有见她。</p><p>九月三十，晴。赤霄二度出鞘，斩开一扇金库大门，救出其中人质。她开始理解，赤霄乃意志之剑。她以为她一直以来做得够多，其实是她做得太少。她必须更快，她必须更有力。</p><p>七月七，多云。生辰，十几年来，魏彦吾第一次提出要看一看她的剑，她凝聚一路所学，以未完成的云裂作为答卷，魏彦吾不置可否。</p><p>一月十一，晴。与罗德岛一同离开龙门。之后一路，赤霄鲜少出鞘。</p><h3 id="往昔时光"><a href="#往昔时光" class="headerlink" title="往昔时光"></a><strong>往昔时光</strong></h3><p><img src="/../images/%E9%99%88/%E6%A8%A1%E7%BB%84_%E5%BE%80%E6%98%94%E6%97%B6%E5%85%89.png" alt="模组_往昔时光"></p><p>大地的伤痕自天际线奔袭而来，精准地击中一片维多利亚式建筑群，楼宇如同遭遇旋风袭击的树林，围绕着同一个点以放射状倒塌。在这片帝国的废墟之中，两个身影正翻过一座倒下的石碑，试图寻找高点。</p><p>“这里荒废多久了？”陈站在废墟上远眺，身后的石碑上那些曾经象征着荣誉的名字都被涂抹殆尽。</p><p>“这片校舍自从战争爆发那会儿就弃用了，还没完成学业的学弟学妹们被分流到了新的校区，完成了剩下的课程……陈陈，前面是我们以前的老训练场，你还记得吗？”风笛的声音从低处传来。</p><p>“我记得特别清楚，感觉自己当学生的时候总是错过一些好事。一到毕业路也修好了，训练场也修好了。”</p><p>训练场被冲击波挤成了一片片翘起的地块，陈捡起了一块石头，丢进地块夹缝中冒出的灌木丛，躲在其中的羽兽尖叫着扑腾向远处。</p><p>“那时候已经足够好啦。”风笛的声音自远而近，停留在了陈的耳畔。</p><p>“也是。那可能是我最单纯的一段时间了，不用去思考一些麻烦的问题，只需要专心训练和学习。”</p><p>“这就是当时的你每天疯狂训练，全常规科目拿A的动力？”风笛将双手搭在陈的肩上，轻轻地摇晃着。</p><p>“回去以后，我发现有太多的事无法用刀剑解决，有些时候会觉得自己过于渺小，即便努力工作，也无法改变很多事——消灭敌人有的时候并不能解决问题。”陈摇了摇头，好像要把过去的庞杂思绪都从脑海中丢出去。</p><p>两人走下高坡，记忆中的花圃还在原地。</p><p>曾经高悬的近卫学校标志一半深深插入泥土，一半斜靠在断裂的石柱上。夕阳西下，阳光倾泻在已有斑驳锈迹的标志上，仅剩的金属光泽诉说着这里曾经的荣光。</p><p>“一切都变了，维多利亚不也一样吗？”陈盯着校徽，喃喃自语道。</p><p>“还是有人没有变的。知道你要来，我前几天特意去拜访了泰勒教官。当时你走得太匆忙，留在宿舍里的文件啥的都没带走——她这些年一直保管着你这些东西。</p><p>这是你的学业通过证明。哦对了，还有这个！”</p><p>风笛从随身的包里掏出了一叠证件，还有一把木剑。</p><p>“这是你当年的训练用剑，按道理是要收回的，但是你的成绩太好了，教官本来打算给你个惊喜，想把这把剑送给你……”</p><p>“代我向她表示感谢。那会儿我走得太快了……”</p><p>“至少你现在回来了。这些年，我们很多同学再也没有回来。”</p><p>两人沉默了一会儿。</p><p>“十年后，你觉得你会在哪？”</p><p>“谁知道呢，应该要回去吧，还有很多事要做。”陈向远方看去，那正是龙门的方向，“那时无论来这上学还是离开，都是他们安排好的。现在，我要自己走回去了。”</p>]]></content>
      
      
      <categories>
          
          <category> 明日方舟 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机静态ip配置</title>
      <link href="/2024/06/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/06/04/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>打开虚拟机，点击导航栏上面的 编辑–&gt;虚拟网络编辑器</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162725907.png" alt="image-20240612162725907"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>选中上面的VMnet8，在到下面的子网 ip 处编辑ip地址，可以改成192.168.8.0，点击右边的 NAT设置</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162736166.png" alt="image-20240612162736166"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>在NAT中设置网关 i p，可以改成 192.168.8.2，点击确定就可以了，</p><p>配置【网关ip】，注意【网关ip】需要在【子网ip】段下，这里设置为192.168.8.2，请不要设置为192.168.8.1，否则会出错。</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162742888.png" alt="image-20240612162742888"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在电脑的任务栏中选中网络那里右键打开 网络和共享中心</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162749719.png" alt="image-20240612162749719"></p><p>在左边点击 <em>更改适配器设置</em>，然后右键选属性打开 <em>VMare Network Adapter VMnet8</em>,</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162753888.png" alt="image-20240612162753888"></p><p>在打开的页面上选 Internet协议版本4</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162800828.png" alt="image-20240612162800828"></p><p>点击属性，在打开的页面选择 使用下面的ip地址 </p><p>ip地址可以填192.168.8.1，默认网关必须与前面的第三步配好的网关ip一致也就是 192.168.8.2，就此虚拟机的固定ip地址就配完了</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162805670.png" alt="image-20240612162805670"></p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>到linux操作系统中输入命令 vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><blockquote><p>TYPE&#x3D;Ethernet<br>PROXY_METHOD&#x3D;none<br>BROWSER_ONLY&#x3D;no<br>BOOTPROTO&#x3D;static #dhcp修改为static<br>DEFROUTE&#x3D;yes<br>IPV4_FAILURE_FATAL&#x3D;no<br>IPV6INIT&#x3D;yes<br>IPV6_AUTOCONF&#x3D;yes<br>IPV6_DEFROUTE&#x3D;yes<br>IPV6_FAILURE_FATAL&#x3D;no<br>IPV6_ADDR_GEN_MODE&#x3D;stable-privacy<br>NAME&#x3D;ens33<br>#HWADDR&#x3D;00:0C:39:82:D2:E1 #mac地址<br>UUID&#x3D;e9fc8134-2e3f-480c-99db-012d118df87b<br>DEVICE&#x3D;ens33<br>ONBOOT&#x3D;yes<br>IPADDR&#x3D;192.168.8.101 #静态IP，跟192.168.8的网段相同，但不能与192.168.8.1一样会冲突<br>NETMASK&#x3D;255.255.255.0 #子网 掩码<br>GATEWAY&#x3D;192.168.8.2 #网关<br>DNS1&#x3D;192.168.8.2 #DNS配置与网关一致</p></blockquote><p>改好后保存退出，重启网卡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>ifconfig 回车查看ip地址：</p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162809701.png" alt="image-20240612162809701"></p><p>可以输入ping <a href="http://www.baidu.com看看是否能ping通百度,下面个的图片已经可以ping通百度了,这时候按ctrl+z键可以停止/">www.baidu.com看看是否能ping通百度，下面个的图片已经可以ping通百度了，这时候按ctrl+Z键可以停止</a></p><p><img src="/../images%5C%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E9%85%8D%E7%BD%AE%5Cimage-20240612162812495.png" alt="image-20240612162812495"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S虚拟机集群配置</title>
      <link href="/2024/05/31/K8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/31/K8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本环境准备工作"><a href="#一、基本环境准备工作" class="headerlink" title="一、基本环境准备工作"></a>一、基本环境准备工作</h3><p><strong>设置hostname</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname node1 </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname node2</span><br></pre></td></tr></table></figure><p><strong>关闭防火墙</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><strong>查看ip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>master：192.168.19.101</p><p>node1： 192.168.19.102</p><p>node2： 192.168.19.103</p><p><strong>设置host和ip绑定</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p><strong>三个节点相互可以ping通</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping master</span><br><span class="line">ping node1</span><br><span class="line">ping node2</span><br></pre></td></tr></table></figure><p><strong>系统初始化</strong></p><p><strong>关闭selinux</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class="comment"># 永久</span></span><br><span class="line">setenforce 0 <span class="comment"># 临时</span></span><br></pre></td></tr></table></figure><p><strong>关闭 swap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a <span class="comment"># 临时</span></span><br><span class="line">vim /etc/fstab <span class="comment"># 永久</span></span><br></pre></td></tr></table></figure><p><strong>将桥接的 IPv4 流量传递到 iptables 的链</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p><strong>时间同步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><h3 id="二、所有节点安装-Docker-kubeadm-kubelet"><a href="#二、所有节点安装-Docker-kubeadm-kubelet" class="headerlink" title="二、所有节点安装 Docker&#x2F;kubeadm&#x2F;kubelet"></a>二、所有节点安装 Docker&#x2F;kubeadm&#x2F;kubelet</h3><p>Kubernetes 默认 CRI（容器运行时）为 Docker，因此先安装 Docker。</p><h4 id="（1）安装-Docker"><a href="#（1）安装-Docker" class="headerlink" title="（1）安装 Docker"></a>（1）安装 Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><h4 id="（2）添加阿里云-YUM-软件源"><a href="#（2）添加阿里云-YUM-软件源" class="headerlink" title="（2）添加阿里云 YUM 软件源"></a>（2）添加阿里云 YUM 软件源</h4><p>设置仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>添加 yum 源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="（3）安装-kubeadm，kubelet-和-kubectl"><a href="#（3）安装-kubeadm，kubelet-和-kubectl" class="headerlink" title="（3）安装 kubeadm，kubelet 和 kubectl"></a>（3）安装 kubeadm，kubelet 和 kubectl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="三、部署-Kubernetes-Master"><a href="#三、部署-Kubernetes-Master" class="headerlink" title="三、部署 Kubernetes Master"></a>三、部署 Kubernetes Master</h3><p>在 192.168.19.101（Master）执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --apiserver-advertise-address=192.168.19.101 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.23.6 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p><img src="/./images%5CK8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%5Cimage-20240612162900429.png" alt="image-20240612162900429"></p><p>安装成功后，复制如下配置并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p><img src="/./../images%5CK8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%5Cimage-20240612162909908.png" alt="image-20240612162909908"></p><h3 id="四、加入-Kubernets-Node"><a href="#四、加入-Kubernets-Node" class="headerlink" title="四、加入 Kubernets Node"></a>四、加入 Kubernets Node</h3><p>获取master节点的token</p><p>如果 token 已经过期，就重新申请</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create</span><br></pre></td></tr></table></figure><p>token 没有过期可以通过如下命令获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token list</span><br></pre></td></tr></table></figure><p>获取 –discovery-token-ca-cert-hash 值，得到值后需要在前面拼接上 sha256:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | \</span><br><span class="line">openssl dgst -sha256 -hex | sed <span class="string">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure><p>在node节点输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.19.101:6443 --token 01ypzs.0af41ttdb3o6ush9 --discovery-token-ca-cert-hash sha256:7b01f7fe1f03a38b845c506eccad67e30f781ac6cc7877e00af45f33b8b3cdf4</span><br></pre></td></tr></table></figure><p>查看nodes</p><p><img src="/../images%5CK8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%5Cimage-20240612162914428.png" alt="image-20240612162914428"></p><p>输入<strong>kubectl get componentstatus</strong>查看组件状态</p><p><img src="/../images%5CK8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%5Cimage-20240612162918366.png" alt="image-20240612162918366"></p><p>输入<strong>kubectl get pods</strong>查看pod</p><p><img src="/../images%5CK8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%5Cimage-20240612162921735.png" alt="image-20240612162921735"></p><p>输入<strong>kubectl get pods -n kube-system</strong>查看指定命名空间的pod</p><p><img src="/../images%5CK8S%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%5Cimage-20240612162924963.png" alt="image-20240612162924963"></p><p>最上面两个pod没用准备好是因为没有网络</p><h3 id="五、部署CNI网络插件"><a href="#五、部署CNI网络插件" class="headerlink" title="五、部署CNI网络插件"></a>五、部署CNI网络插件</h3><p>在&#x2F;opt下创建k8s文件夹</p><p>在&#x2F;opt&#x2F;k8s下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://calico-v3-25.netlify.app/archive/v3.25/manifests/calico.yaml -O</span><br></pre></td></tr></table></figure><p>修改 calico.yaml 文件中的 CALICO_IPV4POOL_CIDR 配置，修改为与初始化的 cidr 相同</p><p>修改calico.yaml 文件中的 镜像地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s#docker.io/##g&#x27;</span> calico.yaml</span><br></pre></td></tr></table></figure><p>构建应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
